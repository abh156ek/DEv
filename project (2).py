# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jx-5spwOyWL-9TZWMiH5KeA_OUNpeIK0

**Install libraries**
"""

!pip install diffusers accelerate
!pip install sentence-transformers
!pip install gradio
!pip install pillow

from PIL import Image
import requests
from io import BytesIO
import torch
from sentence_transformers import SentenceTransformer, util
from IPython.display import display
from diffusers import AutoPipelineForInpainting, AutoencoderKL
from diffusers.utils import load_image
import gradio as gr




device = 'cuda' if torch.cuda.is_available() else 'cpu'
from sentence_transformers import SentenceTransformer


model = SentenceTransformer('sentence-transformers/clip-ViT-B-32', device=device)

def load_image(image_url):
    response = requests.get(image_url)
    return Image.open(BytesIO(response.content))

def encode_images(image_urls):
    images = [load_image(url) for url in image_urls]
    return model.encode(images, batch_size=8, convert_to_tensor=True, device=device)

def open_and_display_bw_image(image_url):
    response = requests.get(image_url)
    response.raise_for_status()
    image = Image.open(BytesIO(response.content))
    return image

def find_most_similar_image(text, image_dict):
    image_urls = list(image_dict.keys())
    text_embedding = model.encode(text, convert_to_tensor=True, device=device)
    image_embeddings = encode_images(image_urls)

    similarities = util.pytorch_cos_sim(text_embedding, image_embeddings)[0]

    most_similar_idx = torch.argmax(similarities).item()
    most_similar_image_url = image_urls[most_similar_idx]
    most_similar_item_link = image_dict[most_similar_image_url]

    return most_similar_image_url, most_similar_item_link

image_dict = {
    'https://m.media-amazon.com/images/I/81ek8zyFDOL._SX679_.jpg':'https://www.amazon.in/IndoPrimo-Cotton-Casual-Regular-Windopande/dp/B0CQR4CNSJ/ref=pd_rhf_se_s_pd_crcd_d_sccl_2_2/261-7345148-5939921?pd_rd_w=Qjfkm&content-id=amzn1.sym.785b16db-ca40-46a3-ae75-2b38bb48d1aa&pf_rd_p=785b16db-ca40-46a3-ae75-2b38bb48d1aa&pf_rd_r=D1E2GHR5DE2TGA4XQ03Y&pd_rd_wg=YNDPY&pd_rd_r=af385f3c-eec3-4310-8969-40248a4ffb69&pd_rd_i=B0CQR1FZKC&psc=1&tag=coa_in-21',
    'https://m.media-amazon.com/images/I/41QKjOKDFcL.jpg':'https://www.amazon.in/Leriya-Fashion-Textured-Shirts-Stylish/dp/B0CRDG857P?tag=coa_in-21',
    'https://m.media-amazon.com/images/I/71MaGTXl7ML._SY879_.jpg':'https://www.amazon.in/Lymio-Casual-Stylish-Printed-Mistry/dp/B0BRKJ3QSR/ref=sr_1_52?dib=eyJ2IjoiMSJ9.vslCe-0M-Q6hWPXBqX5Or1lFqjixy1c9679i9vmfbtQQ39C4WaU1a7BX0LGt9bovSJrXDbi0vmgQ6nkWeEHajmxRRcpMhiB0Ja&tag=coa_in-21',
    'https://m.media-amazon.com/images/I/71KCmMRyJiL._SX679_.jpg':'https://www.amazon.in/IndoPrimo-Cotton-Casual-Regular-Sleeves/dp/B0C9DD1BQL/ref=sr_1_22_sspa?dib=eyJ2IjoiMSJ9.vslCe-0M-Q6hWPXBqX5Or1lFqjixy1c9679i9vmfbtQQ39C4WaU1a7BX0LGt9bovSJrXDbi0vmgQ6nkWeEHajmxRRcpMhiB0Ja&tag=coa_in-21',
    'https://m.media-amazon.com/images/I/51TZSGQ63CL._SX679_.jpg':'https://www.amazon.in/ADRO-Mens-Printed-T-Shirt-Navy/dp/B09PNRBM72/ref=sr_1_23_sspa?crid=VMZZ64S58TXR&dib=eyJ2IjoiMSJ9.obhGuUO9S0v0lWQLZKP4O0_TXu79coTioe644Cq6w52BzoxcPl-xw4Mhw7nkQ-PoZDFlnL6st-OOAjYRMW3Ov-uldlYLmHAZ1KAyj0EziBf_FTsLkHnlLGeA7gyBpCgX-QNCYk10Kxy915sQeaYe-qJ3exaylNQffwEg2CLI8Cb-vi7VogH-vBYPM6pm2hlRgNyg_1T2kwkGb1oASCjcTB_0SZLtSKO8BDV9EOyQU43TgyKR63MrYW9VPjlRiWCL12niDMhnpqlYXxzh73s9rp7ACbV3oumQvtIimupXhpE.xBQs3t16msYz9Rtt2ZXM5MpFwFqMbU6poEzdJ5oC3zg&dib_tag=se&keywords=sports+wear&qid=1718893466&s=apparel&sprefix=sports+wea%2Capparel%2C229&sr=1-23-spons&sp_csd=d2lkZ2V0TmFtZT1zcF9tdGY&psc=1',
    'https://m.media-amazon.com/images/I/61HfipQ+zrL._SY879_.jpg':'https://www.amazon.in/Leriya-Fashion-Shirts-Sleeves-Vacation/dp/B0C2JY5989?tag=coa_in-21',
    'https://m.media-amazon.com/images/I/61HfipQ+zrL._SY741_.jpg':'https://www.amazon.in/Lymio-Casual-Stylish-S-Kent-Maroon/dp/B0CTQNWNYZ/ref=sr_1_56?crid=30U1XYOHVIU&dib=eyJ2IjoiMSJ9.4VIR3ukzdTrzcj3PLIi7ULpR5CpQLq0PStidCOef8XsNfhxnd1pYUt8JerPv-4HwjEfABWYYY4_jMwxKQdDtr0sPjf2vhDKEzhgxzPgcWd6BGUBRyTC-gZxL8JEnY4qlDEtQIVV_PZyJch0n-Nu5xoeOr4r1yrXguaPRQnrtEsCOTVIBFhI8rtBsq42IMIVrT2jEQ78CZnZNF0HuMigzN-P3aIQGTF6HZOZ628F6rd3pe5DPFuPJfzMvpYUPipS_BXbVmxw65nqDBGt23GY_ke2S7TVht0kNgD_pnFwYy9Y.o4gdjQ9aJwNSIe8wM4BLdlgb63QpFlptdqEBIadefSE&dib_tag=se&keywords=shirt&qid=1716128577&sprefix=shir%2Caps%2C217&sr=8-56&tag=coa_in-21'


}
#text = "blue shirt"

#most_similar_image_url, most_similar_item_link = find_most_similar_image(text, image_dict)

#img_object = open_and_display_bw_image(most_similar_image_url)



"""**Import libraries**

**Load the pipeline**
"""

vae = AutoencoderKL.from_pretrained("madebyollin/sdxl-vae-fp16-fix", torch_dtype=torch.float16)
pipeline = AutoPipelineForInpainting.from_pretrained("diffusers/stable-diffusion-xl-1.0-inpainting-0.1", vae=vae, torch_dtype=torch.float16, variant="fp16", use_safetensors=True).to("cpu")
pipeline.load_ip_adapter("h94/IP-Adapter", subfolder="sdxl_models", weight_name="ip-adapter_sdxl.bin", low_cpu_mem_usage=True)

"""**Load the main image**

**Load the clothing image**

**Create the mask image**

To create the mask image we're going to use a [body segmentation tool](https://github.com/TonyAssi/Segment-Body) that will do it automatically
"""

# Commented out IPython magic to ensure Python compatibility.
! git clone https://github.com/TonyAssi/Segment-Body.git
# %cd /content/Segment-Body
! pip install -r requirements.txt
! cp ./SegBody.py ..
# %cd ..

from SegBody import segment_body

"""**Generate image**

pipeline.set_ip_adapter_scale(1.0)
images = pipeline(
    prompt="photorealistic, perfect body, beautiful skin, realistic skin, natural skin",
    negative_prompt="ugly, bad quality, bad anatomy, deformed body, deformed hands, deformed feet, deformed face, deformed clothing, deformed skin, bad skin, leggings, tights, stockings",
    image=image,
    mask_image=mask_image,
    ip_adapter_image=ip_image,
    strength=0.99,
    guidance_scale=7.5,
    num_inference_steps=100,
).images
images[0]
"""

#print("The link to buy the item is:", most_similar_item_link)

def virtual_try_on(img, clothing_text):
    clothing_url, most_similar_item_link = find_most_similar_image(clothing_text, image_dict)
    clothing = load_image(clothing_url)

    _, mask_img = segment_body(img, face=False)

    pipeline.set_ip_adapter_scale(1.0)

    def text_to_link(text):
      if not text.startswith(('http://', 'https://')):
        return 'https://' + text
      return text

    link=text_to_link(most_similar_item_link)

    images = pipeline(
        prompt="photorealistic, perfect body, beautiful skin, realistic skin, natural skin",
        negative_prompt="ugly, bad quality, bad anatomy, deformed body, deformed hands, deformed feet, deformed face, deformed clothing, deformed skin, bad skin, leggings, tights, stockings",
        image=img,
        mask_image=mask_img,
        ip_adapter_image=clothing,
        strength=0.99,
        guidance_scale=7.5,
        num_inference_steps=100,
    ).images

    return images[0], link

iface = gr.Interface(
    fn=virtual_try_on,
    inputs=[
        gr.Image(type="pil", label="Input Image"),
        gr.Textbox(label="Clothing Description or URL")
    ],
    outputs=[
        gr.Image(type="pil", label="Output Image"),
        gr.Textbox(label="Item Link")
    ]
)

iface.launch()